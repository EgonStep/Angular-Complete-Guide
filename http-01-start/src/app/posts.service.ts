import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpEventType } from '@angular/common/http';
import { Post } from './post.model';
import { map, catchError, tap } from 'rxjs/operators';
import { Subject, throwError } from 'rxjs';

@Injectable({providedIn: 'root'})
export class PostsService {

  error = new Subject<string>();

  constructor(private readonly http: HttpClient) {
  }

  createPosts(title: string, content: string) {
    const postData: Post = {
      title: title,
      content: content
    };

    // Send Http request
    return this.http
    .post<{ name: string }>(
      'https://angular-backend-bee64.firebaseio.com/posts.json', //.json is a Firebase requirement
      postData,
      {
        observe: 'response'
      }
    ) // If we don't subscribe, Angular will not even make the request
    .subscribe(responseData => {
      console.log(responseData);
    }, error => {
      this.error.next(error.message);
    });
  }

  fetchPosts() {
    let searchParams = new HttpParams();
    searchParams = searchParams.append('print', 'pretty');
    searchParams = searchParams.append('custom', 'key');

    // <Defining the type of returned http object>
    return this.http
    .get<{ [key: string]: Post }>(
      'https://angular-backend-bee64.firebaseio.com/posts.json',
      {
        headers: new HttpHeaders({'Custom-Header': 'Hello'}),
        params: searchParams
      }
    )
    .pipe(
      map(responseData => {
        const postsArray: Post[] = [];

        for(const key in responseData) {
          if (responseData.hasOwnProperty(key)) {
            postsArray.push({ ...responseData[key], id: key}); // Keep the ID generated by Firebase
          }
        }

        return postsArray;
    }),
      catchError(errorResponse => {
        return throwError(errorResponse);
      })
    ); // Subscribe on the component if the component cares for the returning data
  }

  deleteAllPosts() {
    return this.http.delete(
      'https://angular-backend-bee64.firebaseio.com/posts.json',
      {
        observe: 'events'
      }
    ).pipe(tap(event => { // Tap will not interrupt the request
      console.log(event);

      // event.type is to know what is the request's status

      if (event.type === HttpEventType.Sent) {
        // ...
      }
      if (event.type === HttpEventType.Response) {
        console.log(event.body);
      }
    }));
  }
}
